<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<!-- xml 이름상관 없음. *.xml로 설정했으니까 -->
<!-- 이 xml이 어떤 interface와 연결되는지 설정 -->
<mapper namespace="com.gong.gu.dao.GroupBuyBoardDAO">

   <!-- 조건2
      useGeneratedKeys="true" <- insert후 키를 가져오는 옵션을 사용할 것인가?
      keyProperty="idx" <- dto의 어느 필드에 담을 것인가? , 필드에 값을 넣겠다. 필드는 클래스만 받을 수 있다 hashmap은 안된다.
      keyColumn="idx" <- 어느 컬럼을 가져올 것인가? , DB의 어떤 컬럼에서 값을 가져올지 정하는 값
   --> 
   
   <!-- id= 연결할 DAO의 메서드명  -->
   <insert id="groupbuywrite"
      useGeneratedKeys="true"
      keyProperty="board_no"
      keyColumn="board_no"
      parameterType="com.gong.gu.dto.BoardDTO">
      INSERT INTO board(user_id,board_title,board_content,board_name)VALUES('admin01',#{board_title},#{board_content},'공구게시판')
      
   </insert>

   <insert id="fileWrite">
      INSERT INTO photo(photo_oriname, photo_newname)VALUES(#{param1},#{param2})
   </insert>

	<insert id="groupbuywrite2">
		INSERT INTO groupbuy_addit(board_no,product_category_name,groupbuy_target, groupbuy_unitprice,groupbuy_due_date,groupbuy_max)
		VALUES(#{param1},#{param2},#{param3},#{param4},#{param5},#{param6})
	</insert>
	






	<!-- 공구리스트 불러오기 -->
<!-- <select id="groupBuyList" resultType="hashmap">
		
		SELECT b.board_no, b.board_title, p.photo_newname, ga.groupbuy_state, ga.groupbuy_target, ga.groupbuy_unitprice, sum(oi.order_quantity) as sum
		FROM board b
		LEFT JOIN groupbuy_addit ga USING (board_no)
		LEFT JOIN photo p USING (board_no)
		left join order_info oi USING (board_no)
		where p.photo_thum = 'Y' and board_exposure = 'Y' and (oi.order_state = '신청완료' or oi.order_state is null)
		group by board_no 
		ORDER BY b.board_no DESC;
				
	</select>
	
	<select id="groupBuyList2" resultType="hashmap">
	
		SELECT 
		b.board_no, b.board_title, p.photo_newname, ga.groupbuy_state, ga.groupbuy_target, ga.groupbuy_unitprice, sum(oi.order_quantity) as sum
		FROM board b
		LEFT JOIN groupbuy_addit ga
		USING (board_no)
		LEFT JOIN photo p
		USING (board_no)
		left join order_info oi USING (board_no)
		where p.photo_thum = 'Y' and board_exposure = 'Y' and (oi.order_state = '신청완료' or oi.order_state is null) and product_category_name = #{param1}
		group by board_no 
		ORDER BY b.board_no DESC;
				
	</select>
-->
	
	<!-- 찜여부확인 -->
	<select id="wishlist" resultType="String" >
		SELECT board_no FROM wishlist WHERE user_id = #{param1}
	</select>
	
	
	<!-- 찜 추가/삭제 -->
	
	<!-- 찜 하트 클릭 시 찜여부확인 -->
	<select id="wishlist2" resultType="String" >
		SELECT board_no FROM wishlist WHERE board_no = #{param1} AND user_id = #{param2}
	</select>
	
	<insert id="wishList_Insert" >
		INSERT INTO wishlist(user_id,board_no) VALUES (#{param1}, #{param2})
	</insert>
	
	<delete id="wishList_delete">
		DELETE FROM wishlist WHERE board_no = #{param1} AND user_id = #{param2}
	</delete>
	
	
	
	<select id="groupBuyRangeCall1" resultType="int">
	<!-- select count (board_no) from board where board_name = '공구게시판' -->
	SELECT count(board_no) FROM board INNER JOIN photo USING (board_no) WHERE photo_thum = 'Y' AND board_exposure ='Y'
	
	
	</select>
	<select id="groupBuyListCall1" resultType="hashmap">
		SELECT b.board_no, b.board_title, p.photo_newname, ga.groupbuy_state, ga.groupbuy_target, ga.groupbuy_unitprice , sum(oi.order_quantity) as sum
		FROM board b
		LEFT JOIN groupbuy_addit ga USING (board_no)
		LEFT JOIN photo p USING (board_no)
		left join order_info oi USING (board_no)
		where p.photo_thum = 'Y' and board_exposure = 'Y'
		group by board_no
		ORDER BY b.board_no DESC LIMIT #{param1} offset #{param2}
	</select>

	<select id="groupBuyRangeCall2" resultType="int">
	<!-- select count (board_no) from board where board_name = '공구게시판' -->
	SELECT count(board_no) FROM board INNER JOIN photo USING (board_no) INNER JOIN groupbuy_addit ga USING (board_no)
	WHERE photo_thum = 'Y' AND board_exposure ='Y' AND product_category_name = #{param1}
	
	
	</select>
	<select id="groupBuyListCall2" resultType="hashmap">
		SELECT b.board_no, b.board_title, p.photo_newname, ga.groupbuy_state, ga.groupbuy_target, ga.groupbuy_unitprice , sum(oi.order_quantity) as sum
		FROM board b
		LEFT JOIN groupbuy_addit ga USING (board_no)
		LEFT JOIN photo p USING (board_no)
		left join order_info oi USING (board_no)
		where p.photo_thum = 'Y' and board_exposure = 'Y' AND ga.product_category_name = #{param3} group by board_no
		ORDER BY b.board_no DESC LIMIT #{param1} offset #{param2}
	</select>


	
</mapper>